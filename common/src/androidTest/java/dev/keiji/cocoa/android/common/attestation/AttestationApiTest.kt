package dev.keiji.cocoa.android.common.attestation

import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import dev.keiji.util.Base64
import kotlinx.coroutines.runBlocking
import org.json.JSONObject
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import java.nio.charset.Charset
import java.security.MessageDigest

@RunWith(AndroidJUnit4::class)
class AttestationApiTest {
    companion object {
        private const val ATTESTATION_API_KEY = ""

        private const val PAYLOAD_BASE64 =
            "eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlGWHpDQ0JFZWdBd0lCQWdJUUJRc1UvdmFzWlpZS0FBQUFBU1NvQlRBTkJna3Foa2lHOXcwQkFRc0ZBREJHTVFzd0NRWURWUVFHRXdKVlV6RWlNQ0FHQTFVRUNoTVpSMjl2WjJ4bElGUnlkWE4wSUZObGNuWnBZMlZ6SUV4TVF6RVRNQkVHQTFVRUF4TUtSMVJUSUVOQklERkVOREFlRncweU1URXhNakl3TnpReU16VmFGdzB5TWpBeU1qQXdOelF5TXpSYU1CMHhHekFaQmdOVkJBTVRFbUYwZEdWemRDNWhibVJ5YjJsa0xtTnZiVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLRXc5eVlKanRYRU4rZWFQQnk4alVFVVdRR0Riem1ZYTFtWGFFMEVNVmxKTTc3TnRvdXpMOGZ5RVp5dGNuWm1yM08xZ255THR5UUJvU0FWOE5MaTB4bkVXWHh1SEdrZW42bjlrTGRHMTVQOHZEazB4Tm1jTUtFd0d3TnFZRFRxTFA5QmU5c1dkRDFIWk0wekU0QUV2cmhDSVZGeXRzTzI2Wm0yNjZsZzdiUHYyam5qM09IVUNNZnVta3pVWHJPeEQ2U2ZhRGVNSDJQM0FTMHM1WWsvRHJmVzJOYkw5cEF0TFNwWkJqMmRyT1VrTlBjU0VCSjdpeHUzVGVxYzVGa3kyaXV6STh6eGZvR2RTWlE4SCtpQkJRSUhaVjRUYVM1QVVFZGRMdXNNQktDVkppNnY1Y0RjUFB5OTZ2VE9jalJxc1VxWGxXMU1LeXp2QS8xYjJURkNLaThDQXdFQUFhT0NBbkF3Z2dKc01BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFUQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJSTzVHd2JDa1U3My9CZ2FGem9OTERnTkY0eUpUQWZCZ05WSFNNRUdEQVdnQlFsNGhnT3NsZVJsQ3JsMUYyR2tJUGVVN080a2pCdEJnZ3JCZ0VGQlFjQkFRUmhNRjh3S2dZSUt3WUJCUVVITUFHR0htaDBkSEE2THk5dlkzTndMbkJyYVM1bmIyOW5MMmQwY3pGa05HbHVkREF4QmdnckJnRUZCUWN3QW9ZbGFIUjBjRG92TDNCcmFTNW5iMjluTDNKbGNHOHZZMlZ5ZEhNdlozUnpNV1EwTG1SbGNqQWRCZ05WSFJFRUZqQVVnaEpoZEhSbGMzUXVZVzVrY205cFpDNWpiMjB3SVFZRFZSMGdCQm93R0RBSUJnWm5nUXdCQWdFd0RBWUtLd1lCQkFIV2VRSUZBekEvQmdOVkhSOEVPREEyTURTZ01xQXdoaTVvZEhSd09pOHZZM0pzY3k1d2Eya3VaMjl2Wnk5bmRITXhaRFJwYm5RdlgwWlFjWEZKU0dkWU5qZ3VZM0pzTUlJQkF3WUtLd1lCQkFIV2VRSUVBZ1NCOUFTQjhRRHZBSFlBS1htKzhKNDVPU0h3Vm5PZlk2VjM1YjVYZlp4Z0N2ajVUVjBtWENWZHg0UUFBQUY5UnMrNEVBQUFCQU1BUnpCRkFpQnJHSkM2UXRTbVdaNi9FbDVQU2NqSmgwdlA1WDlJU3VlL1YxS0h0UEJKRndJaEFLTEMwYXd0dnFwU2pFQnR0bHdHS0R1RGlIVWFTZi9QNWoxSWNTOWtjU2VsQUhVQVVhT3c5ZjBCZVp4V2JiZzNlSThNcEhyTUd5Zkw5NTZJUXBvTi90U0xCZVVBQUFGOVJzKzRlQUFBQkFNQVJqQkVBaUJ2eGVtKy9xNkhEbHlsNU56MVcyZ3RPdEd1THFxNTFzREJIRUhZUXNDcDhnSWdSVmVKN1VXdU5kR1JZVW4wNVl0RzJZR29jZFhOWG5xY0QxYXhUR0xwMkxBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLZEM2SmdPdGhaUzVxeWF1Wm5ETnZnUGxOS1c2MHBIaXpNUGxpNUdhWWkyZnFzOS9DRW1GM0F3elBnZHgxWHVycTVqcVBNc0FyZDh1YUNlOFRsM2o2Qis3aU5CVDBVZHl5Z3RMRzllRGxZNm5PcHdtQ3l0TnRCYXUwSmhLc0VMZ2NkSW9vWmRKNGxxZFZKUXF1eWFGemg2Sks1OVdzbElyQnJQRUd1bDNORCs4bUI5bXVaaUhQckpwY2lwZ2g4NjdWUUZLZWhnY1VjR0RkOWhJcWZieDRzbXY1Q2JLSm9rYzYvaFgyRUJRcTJ3U2FyRElVMnZxakVYcjlLeDJnZFFqUUo2L1FTVFRZb3djZndqK0tFZUhGVlRZWXAxaGo4TjhzM2FqM3B5SVBsRkZibVVOZ2NEaUZDRmVhRWJQNWZ5WkJieDRnVEgwUE9jQUFyZnZHeDN2NzQ9IiwiTUlJRmpEQ0NBM1NnQXdJQkFnSU5BZ0NPc2dJek5tV0xaTTNibXpBTkJna3Foa2lHOXcwQkFRc0ZBREJITVFzd0NRWURWUVFHRXdKVlV6RWlNQ0FHQTFVRUNoTVpSMjl2WjJ4bElGUnlkWE4wSUZObGNuWnBZMlZ6SUV4TVF6RVVNQklHQTFVRUF4TUxSMVJUSUZKdmIzUWdVakV3SGhjTk1qQXdPREV6TURBd01EUXlXaGNOTWpjd09UTXdNREF3TURReVdqQkdNUXN3Q1FZRFZRUUdFd0pWVXpFaU1DQUdBMVVFQ2hNWlIyOXZaMnhsSUZSeWRYTjBJRk5sY25acFkyVnpJRXhNUXpFVE1CRUdBMVVFQXhNS1IxUlRJRU5CSURGRU5EQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt2QXFxUENFMjdsMHc5ekM4ZFRQSUU4OWJBK3hUbURhRzd5N1ZmUTRjK21PV2hsVWViVVFwSzB5djJyNjc4UkpFeEswSFdEamVxK25MSUhOMUVtNWo2ckFSWml4bXlSU2poSVIwS09RUEdCTVVsZHNhenRJSUo3TzBnLzgycWovdkdEbC8vM3Q0dFRxeGlSaExRblRMWEpkZUIrMkRoa2RVNklJZ3g2d043RTVOY1VIM1Jjc2VqY3FqOHA1U2oxOXZCbTZpMUZocUxHeW1oTUZyb1dWVUdPM3h0SUg5MWRzZ3k0ZUZLY2ZLVkxXSzNvMjE5MFEwTG0vU2lLbUxiUko1QXU0eTFldUZKbTJKTTllQjg0RmtxYTNpdnJYV1VlVnR5ZTBDUWRLdnNZMkZrYXp2eHR4dnVzTEp6TFdZSGs1NXpjUkFhY0RBMlNlRXRCYlFmRDFxc0NBd0VBQWFPQ0FYWXdnZ0Z5TUE0R0ExVWREd0VCL3dRRUF3SUJoakFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFEQWRCZ05WSFE0RUZnUVVKZUlZRHJKWGtaUXE1ZFJkaHBDRDNsT3p1Skl3SHdZRFZSMGpCQmd3Rm9BVTVLOHJKbkVhSzBnbmhTOVNaaXp2OElrVGNUNHdhQVlJS3dZQkJRVUhBUUVFWERCYU1DWUdDQ3NHQVFVRkJ6QUJoaHBvZEhSd09pOHZiMk56Y0M1d2Eya3VaMjl2Wnk5bmRITnlNVEF3QmdnckJnRUZCUWN3QW9Za2FIUjBjRG92TDNCcmFTNW5iMjluTDNKbGNHOHZZMlZ5ZEhNdlozUnpjakV1WkdWeU1EUUdBMVVkSHdRdE1Dc3dLYUFub0NXR0kyaDBkSEE2THk5amNtd3VjR3RwTG1kdmIyY3ZaM1J6Y2pFdlozUnpjakV1WTNKc01FMEdBMVVkSUFSR01FUXdDQVlHWjRFTUFRSUJNRGdHQ2lzR0FRUUIxbmtDQlFNd0tqQW9CZ2dyQmdFRkJRY0NBUlljYUhSMGNITTZMeTl3YTJrdVoyOXZaeTl5WlhCdmMybDBiM0o1THpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQUlWVG95MjRqd1hVcjByQVBjOTI0dnVTVmJLUXVZdzNuTGZsTGZMaDVBWVdFZVZsL0R1MThRQVdVTWRjSjZvL3FGWmJoWGtCSDBQTmN3OTd0aGFmMkJlb0RZWTlDay9iK1VHbHVoeDA2emQ0RUJmN0g5UDg0bm5yd3BSKzRHQkRaSytYaDNJMHRxSnkycmdPcU5EZmxyNUlNUThaVFdBM3lsdGFrelNCS1o2WHBGMFBwcXlDUnZwL05DR3YyS1gyVHVQQ0p2c2NwMS9tMnBWVHR5QmpZUFJRK1F1Q1FHQUpLanRON1I1REZyZlRxTVd2WWdWbHBDSkJrd2x1Nys3S1kzY1RJZnpFN2NtQUxza01LTkx1RHorUnpDY3NZVHNWYVU3VnAzeEw2ME9ZaHFGa3VBT094RFo2cEhPajkrT0ptWWdQbU9UNFgzKzdMNTFmWEp5Ukg5S2ZMUlA2blQzMUQ1bm1zR0FPZ1oyNi84VDloc0JXMXVvOWp1NWZaTFpYVlZTNUgwSHlJQk1FS3lHTUlQaEZXcmx0L2hGUzI4TjF6YUtJMFpCR0QzZ1lnRExiaURUOWZHWHN0cGsrRm1jNG9sVmxXUHpYZTgxdmRvRW5GYnI1TTI3MkhkZ0pXbytXaFQ5QllNMEppK3dkVm1uUmZmWGdsb0VvbHVUTmNXemM0MWRGcGdKdThmRjNMRzBnbDJpYlNZaUNpOWE2aHZVMFRwcGpKeUlXWGhrSlRjTUpsUHJXeDFWeXRFVUdyWDJsMEpEd1JqVy82NTZyMEtWQjAyeEhSS3ZtMlpLSTAzVGdsTElwbVZDSzNrQktrS05wQk5rRnQ4cmhhZmNDS09iOUp4Lzl0cE5GbFFUbDdCMzlySmxKV2tSMTdRblpxVnB0RmVQRk9Sb1ptRnpNPSIsIk1JSUZZakNDQkVxZ0F3SUJBZ0lRZDcwTmJOczIrUnJxSVEvRThGalREVEFOQmdrcWhraUc5dzBCQVFzRkFEQlhNUXN3Q1FZRFZRUUdFd0pDUlRFWk1CY0dBMVVFQ2hNUVIyeHZZbUZzVTJsbmJpQnVkaTF6WVRFUU1BNEdBMVVFQ3hNSFVtOXZkQ0JEUVRFYk1Ca0dBMVVFQXhNU1IyeHZZbUZzVTJsbmJpQlNiMjkwSUVOQk1CNFhEVEl3TURZeE9UQXdNREEwTWxvWERUSTRNREV5T0RBd01EQTBNbG93UnpFTE1Ba0dBMVVFQmhNQ1ZWTXhJakFnQmdOVkJBb1RHVWR2YjJkc1pTQlVjblZ6ZENCVFpYSjJhV05sY3lCTVRFTXhGREFTQmdOVkJBTVRDMGRVVXlCU2IyOTBJRkl4TUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF0aEVDaXg3am9YZWJPOXkvbEQ2M2xhZEFQS0g5Z3ZsOU1nYUNjZmIyakgvNzZOdThhaTZYbDZPTVMva3I5ckg1em9RZHNmbkZsOTd2dWZLajZid1NpVjZucWxLcitDTW55NlN4bkdQYjE1bCs4QXBlNjJpbTlNWmFSdzFORURQalRyRVRvOGdZYkV2cy9BbVEzNTFrS1NVakI2RzAwajB1WU9EUDBnbUh1ODFJOEUzQ3ducUlpcnU2ejFrWjFxK1BzQWV3bmpIeGdzSEEzeTZtYld3WkRyWFlmaVlhUlFNOXNIbWtsQ2l0RDM4bTVhZ0kvcGJvUEdpVVUrNkRPb2dyRlpZSnN1QjZqQzUxMXB6cnAxWmtqNVpQYUs0OWw4S0VqOEM4UU1BTFhMMzJoN00xYkt3WVVIK0U0RXpOa3RNZzZUTzhVcG12TXJVcHN5VXF0RWo1Y3VIS1pQZm1naENONkozQ2lvajZPR2FLL0dQNUFmbDQvWHRjZC9wMmgvcnMzN0VPZVpWWHRMMG03OVlCMGVzV0NydU9DN1hGeFlwVnE5T3M2cEZMS2N3WnBESWxUaXJ4WlVUUUFzNnF6a20wNnA5OGc3QkFlK2REcTZkc280OTlpWUg2VEtYLzFZN0R6a3ZndGRpemprWFBkc0R0UUN2OVV3K3dwOVU3RGJHS29nUGVNYTNNZCtwdmV6N1czNUVpRXVhKyt0Z3kvQkJqRkZGeTNsM1dGcE85S1dnejd6cG03QWVLSnQ4VDExZGxlQ2ZlWGtrVUFLSUFmNXFvSWJhcHNaV3dwYmtORmhIYXgyeElQRURnZmcxYXpWWTgwWmNGdWN0TDdUbExuTVEvMGxVVGJpU3cxbkg2OU1HNnpPMGI5ZjZCUWRnQW1EMDZ5SzU2bURjWUJaVUNBd0VBQWFPQ0FUZ3dnZ0UwTUE0R0ExVWREd0VCL3dRRUF3SUJoakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlRrcnlzbWNSb3JTQ2VGTDFKbUxPL3dpUk54UGpBZkJnTlZIU01FR0RBV2dCUmdlMllhUlEyWHlvbFFMMzBFelRTby8vejlTekJnQmdnckJnRUZCUWNCQVFSVU1GSXdKUVlJS3dZQkJRVUhNQUdHR1doMGRIQTZMeTl2WTNOd0xuQnJhUzVuYjI5bkwyZHpjakV3S1FZSUt3WUJCUVVITUFLR0hXaDBkSEE2THk5d2Eya3VaMjl2Wnk5bmMzSXhMMmR6Y2pFdVkzSjBNRElHQTFVZEh3UXJNQ2t3SjZBbG9DT0dJV2gwZEhBNkx5OWpjbXd1Y0d0cExtZHZiMmN2WjNOeU1TOW5jM0l4TG1OeWJEQTdCZ05WSFNBRU5EQXlNQWdHQm1lQkRBRUNBVEFJQmdabmdRd0JBZ0l3RFFZTEt3WUJCQUhXZVFJRkF3SXdEUVlMS3dZQkJBSFdlUUlGQXdNd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEU2tIckVvbzlDMGRoZW1NWG9oNmRGU1BzamJkQlpCaUxnOU5SM3Q1UCtUNFZ4ZnE3dnFmTS9iNUEzUmkxZnlKbTlidmhkR2FKUTNiMnQ2eU1BWU4vb2xVYXpzYUwreXlFbjlXcHJLQVNPc2hJQXJBb3labCt0SmFveDExOGZlc3NtWG4xaElWdzQxb2VRYTF2MXZnNEZ2NzR6UGw2L0FoU3J3OVU1cENaRXQ0V2k0d1N0ejZkVFovQ0xBTng4TFpoMUo3UUpWajJmaE10ZlRKcjl3NHozMFoyMDlmT1UwaU9NeStxZHVCbXB2dll1UjdoWkw2RHVwc3pmbncwU2tmdGhzMThkRzlaS2I1OVVodm1hU0daUlZiTlFwc2czQlpsdmlkMGxJS08yZDF4b3pjbE96Z2pYUFlvdkpKSXVsdHprTXUzNHFRYjlTei95aWxyYkNnajg9Il19.eyJub25jZSI6ImZScFVFbnNpSlFMMXQ1dGZzSUF3WVJVcVJQa3JOK0k4WlNlNjltWFUycG89IiwidGltZXN0YW1wTXMiOjE2NDA5Mzc3NTQ1ODUsImFwa1BhY2thZ2VOYW1lIjoiZGV2LmtlaWppLmNvY29hLmFuZHJvaWQuY29tbW9uLnRlc3QiLCJhcGtEaWdlc3RTaGEyNTYiOiJEaTdqbjNwa1lEUC92bERxbWJabk90RVN0V0ZMY3NsWkJ2QUliZzhPRVNRPSIsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiYXBrQ2VydGlmaWNhdGVEaWdlc3RTaGEyNTYiOlsiYk1RWUVPMDgraEI2UUM3MVcrZnZNT1J3Tmc4V2NsYm9STVhsRXN1R3VVcz0iXSwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImV2YWx1YXRpb25UeXBlIjoiQkFTSUMsSEFSRFdBUkVfQkFDS0VEIn0.Sb9Zwy4aBtjQRH_5QqKG3Q7r_tkWPN4E1zUWKKPAUWsDBqlUBOSbyZ1VgIxecCZTR2D1HqyfupErvQYI7wsogiJpchNadJU1S_hXkV6CHLv-hELxQWhxNuWJrIsOEsa-mLnqczAwe7iWHH9SyHwTcUbNj3ZaigZIM-eMn9zgpzGPlzfnY4XrT6cS8abz3O6S2FhosKlbP15t17ExkQwq5Nued8BdsMOjMrE6fjU-7CDEu66k_HOpuaCUvKObH6qTf6NBVM12cQ7WvRNuxt-bRENh3kniEb_qftNYD-Gyt3b1wC-hXY4YswR9JlzHPl5bBxXGHk98iAWdAQbK67IDsQ"
    }

    @Test
    fun base64Test() {
        val split = PAYLOAD_BASE64.split(".")
        val (header, payload, signature) = Triple(split[0], split[1], split[2])
        println(header)

        val headerJsonStr = String(Base64.decodeUrlSafe(header), Charset.defaultCharset())
        val headerJson = JSONObject(headerJsonStr)
        println(headerJsonStr)

        val payloadStr = String(Base64.decodeUrlSafe(payload), Charset.defaultCharset())
        val payloadJson = JSONObject(payloadStr)
        println(payloadStr)

        val signatureStr = String(Base64.decodeUrlSafe(signature), Charset.defaultCharset())
    }

    @Test
    fun attestTest() = runBlocking {
        if (ATTESTATION_API_KEY.isEmpty()) {
            println("AttestationApiTest.ATTESTATION_API_KEY is empty. Test is skipped.")
            return@runBlocking
        }

        val appContext = InstrumentationRegistry.getInstrumentation().targetContext

        val dummyRequest = DummyRequest()
        val clearText = dummyRequest.getClearText()

        val sha256 = MessageDigest.getInstance("SHA-256")
        val nonce = sha256.digest(clearText.encodeToByteArray())
        val nonceBase64 = Base64.encode(nonce)

        val api = AttestationApiImpl(appContext, ATTESTATION_API_KEY)
        val jwsResultBase64Encoded = api.attest(dummyRequest)
        Assert.assertNotNull(jwsResultBase64Encoded)

        val split = jwsResultBase64Encoded.split(".")
        val (header, payload, signature) = Triple(split[0], split[1], split[2])

        try {
            val headerJsonStr = String(Base64.decodeUrlSafe(header), Charset.defaultCharset())
            val headerJson = JSONObject(headerJsonStr)
            println(headerJsonStr)

            Assert.assertTrue(headerJson.has("alg"))
            Assert.assertEquals("RS256", headerJson["alg"])
            Assert.assertTrue(headerJson.has("x5c"))

            val payloadStr = String(Base64.decodeUrlSafe(payload), Charset.defaultCharset())
            val payloadJson = JSONObject(payloadStr)
            println(payloadStr)

            Assert.assertTrue(payloadJson.has("nonce"))
            Assert.assertEquals(nonceBase64, payloadJson["nonce"])

            Assert.assertTrue(payloadJson.has("apkPackageName"))
            Assert.assertEquals(appContext.packageName, payloadJson["apkPackageName"])

            Assert.assertTrue(payloadJson.has("timestampMs"))
            Assert.assertTrue(payloadJson.has("apkDigestSha256"))
            Assert.assertTrue(payloadJson.has("ctsProfileMatch"))
            Assert.assertTrue(payloadJson.has("apkCertificateDigestSha256"))

            val signatureStr = String(Base64.decodeUrlSafe(signature), Charset.defaultCharset())
            Assert.assertNotNull(signatureStr)

        } catch (exception: IllegalArgumentException) {
            Assert.assertEquals("", jwsResultBase64Encoded)
            Assert.fail()
        }
    }
}

class DummyRequest : AttestationRequest {
    override fun getClearText(): String = "abcdefg"
}